// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Header = exports.Header = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Slice = exports.Slice = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Document = exports.Document = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineHeader()
defineSlice()
defineDocument()

function defineHeader () {
  Header.encodingLength = encodingLength
  Header.encode = encode
  Header.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.document)) {
      var len = Document.encodingLength(obj.document)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.programmes)) {
      var len = Slice.encodingLength(obj.programmes)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.document)) {
      buf[offset++] = 10
      varint.encode(Document.encodingLength(obj.document), buf, offset)
      offset += varint.encode.bytes
      Document.encode(obj.document, buf, offset)
      offset += Document.encode.bytes
    }
    if (defined(obj.programmes)) {
      buf[offset++] = 18
      varint.encode(Slice.encodingLength(obj.programmes), buf, offset)
      offset += varint.encode.bytes
      Slice.encode(obj.programmes, buf, offset)
      offset += Slice.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      document: null,
      programmes: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.document = Document.decode(buf, offset, offset + len)
        offset += Document.decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.programmes = Slice.decode(buf, offset, offset + len)
        offset += Slice.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSlice () {
  Slice.encodingLength = encodingLength
  Slice.encode = encode
  Slice.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.start)) {
      var len = encodings.int64.encodingLength(obj.start)
      length += 1 + len
    }
    if (defined(obj.stop)) {
      var len = encodings.int64.encodingLength(obj.stop)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.start)) {
      buf[offset++] = 8
      encodings.int64.encode(obj.start, buf, offset)
      offset += encodings.int64.encode.bytes
    }
    if (defined(obj.stop)) {
      buf[offset++] = 16
      encodings.int64.encode(obj.stop, buf, offset)
      offset += encodings.int64.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      start: 0,
      stop: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.start = encodings.int64.decode(buf, offset)
        offset += encodings.int64.decode.bytes
        break
        case 2:
        obj.stop = encodings.int64.decode(buf, offset)
        offset += encodings.int64.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineDocument () {
  var LocalizedText = Document.LocalizedText = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Icon = Document.Icon = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Channel = Document.Channel = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Programme = Document.Programme = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var StarRating = Document.StarRating = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var AudioDescription = Document.AudioDescription = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var VideoDescription = Document.VideoDescription = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Rating = Document.Rating = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Credit = Document.Credit = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var EpisodeNumber = Document.EpisodeNumber = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineLocalizedText()
  defineIcon()
  defineChannel()
  defineProgramme()
  defineStarRating()
  defineAudioDescription()
  defineVideoDescription()
  defineRating()
  defineCredit()
  defineEpisodeNumber()

  function defineLocalizedText () {
    LocalizedText.encodingLength = encodingLength
    LocalizedText.encode = encode
    LocalizedText.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.lang)) {
        var len = encodings.string.encodingLength(obj.lang)
        length += 1 + len
      }
      if (defined(obj.value)) {
        var len = encodings.string.encodingLength(obj.value)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.lang)) {
        buf[offset++] = 10
        encodings.string.encode(obj.lang, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.value)) {
        buf[offset++] = 18
        encodings.string.encode(obj.value, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        lang: "",
        value: ""
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.lang = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.value = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineIcon () {
    Icon.encodingLength = encodingLength
    Icon.encode = encode
    Icon.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.src)) {
        var len = encodings.string.encodingLength(obj.src)
        length += 1 + len
      }
      if (defined(obj.width)) {
        var len = encodings.float.encodingLength(obj.width)
        length += 1 + len
      }
      if (defined(obj.height)) {
        var len = encodings.float.encodingLength(obj.height)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.src)) {
        buf[offset++] = 10
        encodings.string.encode(obj.src, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.width)) {
        buf[offset++] = 21
        encodings.float.encode(obj.width, buf, offset)
        offset += encodings.float.encode.bytes
      }
      if (defined(obj.height)) {
        buf[offset++] = 29
        encodings.float.encode(obj.height, buf, offset)
        offset += encodings.float.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        src: "",
        width: 0,
        height: 0
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.src = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.width = encodings.float.decode(buf, offset)
          offset += encodings.float.decode.bytes
          break
          case 3:
          obj.height = encodings.float.decode(buf, offset)
          offset += encodings.float.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineChannel () {
    Channel.encodingLength = encodingLength
    Channel.encode = encode
    Channel.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.id)) {
        var len = encodings.string.encodingLength(obj.id)
        length += 1 + len
      }
      if (defined(obj.urls)) {
        for (var i = 0; i < obj.urls.length; i++) {
          if (!defined(obj.urls[i])) continue
          var len = encodings.string.encodingLength(obj.urls[i])
          length += 1 + len
        }
      }
      if (defined(obj.displayNames)) {
        for (var i = 0; i < obj.displayNames.length; i++) {
          if (!defined(obj.displayNames[i])) continue
          var len = LocalizedText.encodingLength(obj.displayNames[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      if (defined(obj.descriptions)) {
        for (var i = 0; i < obj.descriptions.length; i++) {
          if (!defined(obj.descriptions[i])) continue
          var len = LocalizedText.encodingLength(obj.descriptions[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      if (defined(obj.icons)) {
        for (var i = 0; i < obj.icons.length; i++) {
          if (!defined(obj.icons[i])) continue
          var len = Icon.encodingLength(obj.icons[i])
          length += varint.encodingLength(len)
          length += 2 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.id)) {
        buf[offset++] = 10
        encodings.string.encode(obj.id, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.urls)) {
        for (var i = 0; i < obj.urls.length; i++) {
          if (!defined(obj.urls[i])) continue
          buf[offset++] = 18
          encodings.string.encode(obj.urls[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.displayNames)) {
        for (var i = 0; i < obj.displayNames.length; i++) {
          if (!defined(obj.displayNames[i])) continue
          buf[offset++] = 82
          varint.encode(LocalizedText.encodingLength(obj.displayNames[i]), buf, offset)
          offset += varint.encode.bytes
          LocalizedText.encode(obj.displayNames[i], buf, offset)
          offset += LocalizedText.encode.bytes
        }
      }
      if (defined(obj.descriptions)) {
        for (var i = 0; i < obj.descriptions.length; i++) {
          if (!defined(obj.descriptions[i])) continue
          buf[offset++] = 90
          varint.encode(LocalizedText.encodingLength(obj.descriptions[i]), buf, offset)
          offset += varint.encode.bytes
          LocalizedText.encode(obj.descriptions[i], buf, offset)
          offset += LocalizedText.encode.bytes
        }
      }
      if (defined(obj.icons)) {
        for (var i = 0; i < obj.icons.length; i++) {
          if (!defined(obj.icons[i])) continue
          buf[offset++] = 162
          buf[offset++] = 1
          varint.encode(Icon.encodingLength(obj.icons[i]), buf, offset)
          offset += varint.encode.bytes
          Icon.encode(obj.icons[i], buf, offset)
          offset += Icon.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        id: "",
        urls: [],
        displayNames: [],
        descriptions: [],
        icons: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.id = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.urls.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 10:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.displayNames.push(LocalizedText.decode(buf, offset, offset + len))
          offset += LocalizedText.decode.bytes
          break
          case 11:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.descriptions.push(LocalizedText.decode(buf, offset, offset + len))
          offset += LocalizedText.decode.bytes
          break
          case 20:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.icons.push(Icon.decode(buf, offset, offset + len))
          offset += Icon.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineProgramme () {
    Programme.encodingLength = encodingLength
    Programme.encode = encode
    Programme.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.id)) {
        var len = encodings.string.encodingLength(obj.id)
        length += 1 + len
      }
      if (defined(obj.date)) {
        var len = encodings.int64.encodingLength(obj.date)
        length += 1 + len
      }
      if (defined(obj.start)) {
        var len = encodings.int64.encodingLength(obj.start)
        length += 1 + len
      }
      if (defined(obj.stop)) {
        var len = encodings.int64.encodingLength(obj.stop)
        length += 1 + len
      }
      if (defined(obj.channel)) {
        var len = encodings.string.encodingLength(obj.channel)
        length += 1 + len
      }
      if (defined(obj.originalLanguage)) {
        var len = encodings.string.encodingLength(obj.originalLanguage)
        length += 1 + len
      }
      if (defined(obj.languages)) {
        for (var i = 0; i < obj.languages.length; i++) {
          if (!defined(obj.languages[i])) continue
          var len = encodings.string.encodingLength(obj.languages[i])
          length += 1 + len
        }
      }
      if (defined(obj.countries)) {
        for (var i = 0; i < obj.countries.length; i++) {
          if (!defined(obj.countries[i])) continue
          var len = encodings.string.encodingLength(obj.countries[i])
          length += 1 + len
        }
      }
      if (defined(obj.keywords)) {
        for (var i = 0; i < obj.keywords.length; i++) {
          if (!defined(obj.keywords[i])) continue
          var len = encodings.string.encodingLength(obj.keywords[i])
          length += 1 + len
        }
      }
      if (defined(obj.titles)) {
        for (var i = 0; i < obj.titles.length; i++) {
          if (!defined(obj.titles[i])) continue
          var len = LocalizedText.encodingLength(obj.titles[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      if (defined(obj.descriptions)) {
        for (var i = 0; i < obj.descriptions.length; i++) {
          if (!defined(obj.descriptions[i])) continue
          var len = LocalizedText.encodingLength(obj.descriptions[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      if (defined(obj.subtitles)) {
        for (var i = 0; i < obj.subtitles.length; i++) {
          if (!defined(obj.subtitles[i])) continue
          var len = LocalizedText.encodingLength(obj.subtitles[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      if (defined(obj.categories)) {
        for (var i = 0; i < obj.categories.length; i++) {
          if (!defined(obj.categories[i])) continue
          var len = LocalizedText.encodingLength(obj.categories[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      if (defined(obj.icons)) {
        for (var i = 0; i < obj.icons.length; i++) {
          if (!defined(obj.icons[i])) continue
          var len = Icon.encodingLength(obj.icons[i])
          length += varint.encodingLength(len)
          length += 2 + len
        }
      }
      if (defined(obj.credits)) {
        for (var i = 0; i < obj.credits.length; i++) {
          if (!defined(obj.credits[i])) continue
          var len = Credit.encodingLength(obj.credits[i])
          length += varint.encodingLength(len)
          length += 2 + len
        }
      }
      if (defined(obj.episodeNumbers)) {
        for (var i = 0; i < obj.episodeNumbers.length; i++) {
          if (!defined(obj.episodeNumbers[i])) continue
          var len = EpisodeNumber.encodingLength(obj.episodeNumbers[i])
          length += varint.encodingLength(len)
          length += 2 + len
        }
      }
      if (defined(obj.video)) {
        var len = VideoDescription.encodingLength(obj.video)
        length += varint.encodingLength(len)
        length += 2 + len
      }
      if (defined(obj.rating)) {
        var len = Rating.encodingLength(obj.rating)
        length += varint.encodingLength(len)
        length += 2 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.id)) {
        buf[offset++] = 10
        encodings.string.encode(obj.id, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.date)) {
        buf[offset++] = 16
        encodings.int64.encode(obj.date, buf, offset)
        offset += encodings.int64.encode.bytes
      }
      if (defined(obj.start)) {
        buf[offset++] = 24
        encodings.int64.encode(obj.start, buf, offset)
        offset += encodings.int64.encode.bytes
      }
      if (defined(obj.stop)) {
        buf[offset++] = 32
        encodings.int64.encode(obj.stop, buf, offset)
        offset += encodings.int64.encode.bytes
      }
      if (defined(obj.channel)) {
        buf[offset++] = 42
        encodings.string.encode(obj.channel, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.originalLanguage)) {
        buf[offset++] = 50
        encodings.string.encode(obj.originalLanguage, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.languages)) {
        for (var i = 0; i < obj.languages.length; i++) {
          if (!defined(obj.languages[i])) continue
          buf[offset++] = 58
          encodings.string.encode(obj.languages[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.countries)) {
        for (var i = 0; i < obj.countries.length; i++) {
          if (!defined(obj.countries[i])) continue
          buf[offset++] = 66
          encodings.string.encode(obj.countries[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.keywords)) {
        for (var i = 0; i < obj.keywords.length; i++) {
          if (!defined(obj.keywords[i])) continue
          buf[offset++] = 74
          encodings.string.encode(obj.keywords[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.titles)) {
        for (var i = 0; i < obj.titles.length; i++) {
          if (!defined(obj.titles[i])) continue
          buf[offset++] = 82
          varint.encode(LocalizedText.encodingLength(obj.titles[i]), buf, offset)
          offset += varint.encode.bytes
          LocalizedText.encode(obj.titles[i], buf, offset)
          offset += LocalizedText.encode.bytes
        }
      }
      if (defined(obj.descriptions)) {
        for (var i = 0; i < obj.descriptions.length; i++) {
          if (!defined(obj.descriptions[i])) continue
          buf[offset++] = 90
          varint.encode(LocalizedText.encodingLength(obj.descriptions[i]), buf, offset)
          offset += varint.encode.bytes
          LocalizedText.encode(obj.descriptions[i], buf, offset)
          offset += LocalizedText.encode.bytes
        }
      }
      if (defined(obj.subtitles)) {
        for (var i = 0; i < obj.subtitles.length; i++) {
          if (!defined(obj.subtitles[i])) continue
          buf[offset++] = 98
          varint.encode(LocalizedText.encodingLength(obj.subtitles[i]), buf, offset)
          offset += varint.encode.bytes
          LocalizedText.encode(obj.subtitles[i], buf, offset)
          offset += LocalizedText.encode.bytes
        }
      }
      if (defined(obj.categories)) {
        for (var i = 0; i < obj.categories.length; i++) {
          if (!defined(obj.categories[i])) continue
          buf[offset++] = 106
          varint.encode(LocalizedText.encodingLength(obj.categories[i]), buf, offset)
          offset += varint.encode.bytes
          LocalizedText.encode(obj.categories[i], buf, offset)
          offset += LocalizedText.encode.bytes
        }
      }
      if (defined(obj.icons)) {
        for (var i = 0; i < obj.icons.length; i++) {
          if (!defined(obj.icons[i])) continue
          buf[offset++] = 162
          buf[offset++] = 1
          varint.encode(Icon.encodingLength(obj.icons[i]), buf, offset)
          offset += varint.encode.bytes
          Icon.encode(obj.icons[i], buf, offset)
          offset += Icon.encode.bytes
        }
      }
      if (defined(obj.credits)) {
        for (var i = 0; i < obj.credits.length; i++) {
          if (!defined(obj.credits[i])) continue
          buf[offset++] = 202
          buf[offset++] = 1
          varint.encode(Credit.encodingLength(obj.credits[i]), buf, offset)
          offset += varint.encode.bytes
          Credit.encode(obj.credits[i], buf, offset)
          offset += Credit.encode.bytes
        }
      }
      if (defined(obj.episodeNumbers)) {
        for (var i = 0; i < obj.episodeNumbers.length; i++) {
          if (!defined(obj.episodeNumbers[i])) continue
          buf[offset++] = 210
          buf[offset++] = 1
          varint.encode(EpisodeNumber.encodingLength(obj.episodeNumbers[i]), buf, offset)
          offset += varint.encode.bytes
          EpisodeNumber.encode(obj.episodeNumbers[i], buf, offset)
          offset += EpisodeNumber.encode.bytes
        }
      }
      if (defined(obj.video)) {
        buf[offset++] = 218
        buf[offset++] = 1
        varint.encode(VideoDescription.encodingLength(obj.video), buf, offset)
        offset += varint.encode.bytes
        VideoDescription.encode(obj.video, buf, offset)
        offset += VideoDescription.encode.bytes
      }
      if (defined(obj.rating)) {
        buf[offset++] = 226
        buf[offset++] = 1
        varint.encode(Rating.encodingLength(obj.rating), buf, offset)
        offset += varint.encode.bytes
        Rating.encode(obj.rating, buf, offset)
        offset += Rating.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        id: "",
        date: 0,
        start: 0,
        stop: 0,
        channel: "",
        originalLanguage: "",
        languages: [],
        countries: [],
        keywords: [],
        titles: [],
        descriptions: [],
        subtitles: [],
        categories: [],
        icons: [],
        credits: [],
        episodeNumbers: [],
        video: null,
        rating: null
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.id = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.date = encodings.int64.decode(buf, offset)
          offset += encodings.int64.decode.bytes
          break
          case 3:
          obj.start = encodings.int64.decode(buf, offset)
          offset += encodings.int64.decode.bytes
          break
          case 4:
          obj.stop = encodings.int64.decode(buf, offset)
          offset += encodings.int64.decode.bytes
          break
          case 5:
          obj.channel = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 6:
          obj.originalLanguage = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 7:
          obj.languages.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 8:
          obj.countries.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 9:
          obj.keywords.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 10:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.titles.push(LocalizedText.decode(buf, offset, offset + len))
          offset += LocalizedText.decode.bytes
          break
          case 11:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.descriptions.push(LocalizedText.decode(buf, offset, offset + len))
          offset += LocalizedText.decode.bytes
          break
          case 12:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.subtitles.push(LocalizedText.decode(buf, offset, offset + len))
          offset += LocalizedText.decode.bytes
          break
          case 13:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.categories.push(LocalizedText.decode(buf, offset, offset + len))
          offset += LocalizedText.decode.bytes
          break
          case 20:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.icons.push(Icon.decode(buf, offset, offset + len))
          offset += Icon.decode.bytes
          break
          case 25:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.credits.push(Credit.decode(buf, offset, offset + len))
          offset += Credit.decode.bytes
          break
          case 26:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.episodeNumbers.push(EpisodeNumber.decode(buf, offset, offset + len))
          offset += EpisodeNumber.decode.bytes
          break
          case 27:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.video = VideoDescription.decode(buf, offset, offset + len)
          offset += VideoDescription.decode.bytes
          break
          case 28:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.rating = Rating.decode(buf, offset, offset + len)
          offset += Rating.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineStarRating () {
    StarRating.encodingLength = encodingLength
    StarRating.encode = encode
    StarRating.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.value)) {
        var len = encodings.string.encodingLength(obj.value)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.value)) {
        buf[offset++] = 10
        encodings.string.encode(obj.value, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        value: ""
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.value = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineAudioDescription () {
    AudioDescription.encodingLength = encodingLength
    AudioDescription.encode = encode
    AudioDescription.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.stereo)) {
        var len = encodings.bool.encodingLength(obj.stereo)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.stereo)) {
        buf[offset++] = 8
        encodings.bool.encode(obj.stereo, buf, offset)
        offset += encodings.bool.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        stereo: false
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.stereo = encodings.bool.decode(buf, offset)
          offset += encodings.bool.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineVideoDescription () {
    VideoDescription.encodingLength = encodingLength
    VideoDescription.encode = encode
    VideoDescription.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.aspect)) {
        var len = encodings.string.encodingLength(obj.aspect)
        length += 1 + len
      }
      if (defined(obj.quality)) {
        var len = encodings.string.encodingLength(obj.quality)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.aspect)) {
        buf[offset++] = 10
        encodings.string.encode(obj.aspect, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.quality)) {
        buf[offset++] = 18
        encodings.string.encode(obj.quality, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        aspect: "",
        quality: ""
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.aspect = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.quality = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineRating () {
    Rating.encodingLength = encodingLength
    Rating.encode = encode
    Rating.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.system)) {
        var len = encodings.string.encodingLength(obj.system)
        length += 1 + len
      }
      if (defined(obj.value)) {
        var len = encodings.string.encodingLength(obj.value)
        length += 1 + len
      }
      if (defined(obj.icons)) {
        for (var i = 0; i < obj.icons.length; i++) {
          if (!defined(obj.icons[i])) continue
          var len = Icon.encodingLength(obj.icons[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.system)) {
        buf[offset++] = 10
        encodings.string.encode(obj.system, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.value)) {
        buf[offset++] = 18
        encodings.string.encode(obj.value, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.icons)) {
        for (var i = 0; i < obj.icons.length; i++) {
          if (!defined(obj.icons[i])) continue
          buf[offset++] = 26
          varint.encode(Icon.encodingLength(obj.icons[i]), buf, offset)
          offset += varint.encode.bytes
          Icon.encode(obj.icons[i], buf, offset)
          offset += Icon.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        system: "",
        value: "",
        icons: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.system = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.value = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 3:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.icons.push(Icon.decode(buf, offset, offset + len))
          offset += Icon.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineCredit () {
    Credit.encodingLength = encodingLength
    Credit.encode = encode
    Credit.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.directors)) {
        for (var i = 0; i < obj.directors.length; i++) {
          if (!defined(obj.directors[i])) continue
          var len = encodings.string.encodingLength(obj.directors[i])
          length += 1 + len
        }
      }
      if (defined(obj.actors)) {
        for (var i = 0; i < obj.actors.length; i++) {
          if (!defined(obj.actors[i])) continue
          var len = encodings.string.encodingLength(obj.actors[i])
          length += 1 + len
        }
      }
      if (defined(obj.presenters)) {
        for (var i = 0; i < obj.presenters.length; i++) {
          if (!defined(obj.presenters[i])) continue
          var len = encodings.string.encodingLength(obj.presenters[i])
          length += 1 + len
        }
      }
      if (defined(obj.producers)) {
        for (var i = 0; i < obj.producers.length; i++) {
          if (!defined(obj.producers[i])) continue
          var len = encodings.string.encodingLength(obj.producers[i])
          length += 1 + len
        }
      }
      if (defined(obj.writers)) {
        for (var i = 0; i < obj.writers.length; i++) {
          if (!defined(obj.writers[i])) continue
          var len = encodings.string.encodingLength(obj.writers[i])
          length += 1 + len
        }
      }
      if (defined(obj.adapters)) {
        for (var i = 0; i < obj.adapters.length; i++) {
          if (!defined(obj.adapters[i])) continue
          var len = encodings.string.encodingLength(obj.adapters[i])
          length += 1 + len
        }
      }
      if (defined(obj.composers)) {
        for (var i = 0; i < obj.composers.length; i++) {
          if (!defined(obj.composers[i])) continue
          var len = encodings.string.encodingLength(obj.composers[i])
          length += 1 + len
        }
      }
      if (defined(obj.editors)) {
        for (var i = 0; i < obj.editors.length; i++) {
          if (!defined(obj.editors[i])) continue
          var len = encodings.string.encodingLength(obj.editors[i])
          length += 1 + len
        }
      }
      if (defined(obj.commentators)) {
        for (var i = 0; i < obj.commentators.length; i++) {
          if (!defined(obj.commentators[i])) continue
          var len = encodings.string.encodingLength(obj.commentators[i])
          length += 1 + len
        }
      }
      if (defined(obj.guests)) {
        for (var i = 0; i < obj.guests.length; i++) {
          if (!defined(obj.guests[i])) continue
          var len = encodings.string.encodingLength(obj.guests[i])
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.directors)) {
        for (var i = 0; i < obj.directors.length; i++) {
          if (!defined(obj.directors[i])) continue
          buf[offset++] = 10
          encodings.string.encode(obj.directors[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.actors)) {
        for (var i = 0; i < obj.actors.length; i++) {
          if (!defined(obj.actors[i])) continue
          buf[offset++] = 18
          encodings.string.encode(obj.actors[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.presenters)) {
        for (var i = 0; i < obj.presenters.length; i++) {
          if (!defined(obj.presenters[i])) continue
          buf[offset++] = 26
          encodings.string.encode(obj.presenters[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.producers)) {
        for (var i = 0; i < obj.producers.length; i++) {
          if (!defined(obj.producers[i])) continue
          buf[offset++] = 34
          encodings.string.encode(obj.producers[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.writers)) {
        for (var i = 0; i < obj.writers.length; i++) {
          if (!defined(obj.writers[i])) continue
          buf[offset++] = 42
          encodings.string.encode(obj.writers[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.adapters)) {
        for (var i = 0; i < obj.adapters.length; i++) {
          if (!defined(obj.adapters[i])) continue
          buf[offset++] = 50
          encodings.string.encode(obj.adapters[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.composers)) {
        for (var i = 0; i < obj.composers.length; i++) {
          if (!defined(obj.composers[i])) continue
          buf[offset++] = 58
          encodings.string.encode(obj.composers[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.editors)) {
        for (var i = 0; i < obj.editors.length; i++) {
          if (!defined(obj.editors[i])) continue
          buf[offset++] = 66
          encodings.string.encode(obj.editors[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.commentators)) {
        for (var i = 0; i < obj.commentators.length; i++) {
          if (!defined(obj.commentators[i])) continue
          buf[offset++] = 74
          encodings.string.encode(obj.commentators[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      if (defined(obj.guests)) {
        for (var i = 0; i < obj.guests.length; i++) {
          if (!defined(obj.guests[i])) continue
          buf[offset++] = 82
          encodings.string.encode(obj.guests[i], buf, offset)
          offset += encodings.string.encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        directors: [],
        actors: [],
        presenters: [],
        producers: [],
        writers: [],
        adapters: [],
        composers: [],
        editors: [],
        commentators: [],
        guests: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.directors.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.actors.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 3:
          obj.presenters.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 4:
          obj.producers.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 5:
          obj.writers.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 6:
          obj.adapters.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 7:
          obj.composers.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 8:
          obj.editors.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 9:
          obj.commentators.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          case 10:
          obj.guests.push(encodings.string.decode(buf, offset))
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineEpisodeNumber () {
    EpisodeNumber.encodingLength = encodingLength
    EpisodeNumber.encode = encode
    EpisodeNumber.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.system)) {
        var len = encodings.string.encodingLength(obj.system)
        length += 1 + len
      }
      if (defined(obj.value)) {
        var len = encodings.string.encodingLength(obj.value)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.system)) {
        buf[offset++] = 10
        encodings.string.encode(obj.system, buf, offset)
        offset += encodings.string.encode.bytes
      }
      if (defined(obj.value)) {
        buf[offset++] = 18
        encodings.string.encode(obj.value, buf, offset)
        offset += encodings.string.encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        system: "",
        value: ""
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.system = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          case 2:
          obj.value = encodings.string.decode(buf, offset)
          offset += encodings.string.decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  Document.encodingLength = encodingLength
  Document.encode = encode
  Document.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.sourceInfoUrl)) {
      var len = encodings.string.encodingLength(obj.sourceInfoUrl)
      length += 1 + len
    }
    if (defined(obj.sourceInfoName)) {
      var len = encodings.string.encodingLength(obj.sourceInfoName)
      length += 1 + len
    }
    if (defined(obj.generatorInfoName)) {
      var len = encodings.string.encodingLength(obj.generatorInfoName)
      length += 1 + len
    }
    if (defined(obj.generatorInfoUrl)) {
      var len = encodings.string.encodingLength(obj.generatorInfoUrl)
      length += 1 + len
    }
    if (defined(obj.channels)) {
      for (var i = 0; i < obj.channels.length; i++) {
        if (!defined(obj.channels[i])) continue
        var len = Channel.encodingLength(obj.channels[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.sourceInfoUrl)) {
      buf[offset++] = 10
      encodings.string.encode(obj.sourceInfoUrl, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.sourceInfoName)) {
      buf[offset++] = 18
      encodings.string.encode(obj.sourceInfoName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.generatorInfoName)) {
      buf[offset++] = 26
      encodings.string.encode(obj.generatorInfoName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.generatorInfoUrl)) {
      buf[offset++] = 34
      encodings.string.encode(obj.generatorInfoUrl, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.channels)) {
      for (var i = 0; i < obj.channels.length; i++) {
        if (!defined(obj.channels[i])) continue
        buf[offset++] = 98
        varint.encode(Channel.encodingLength(obj.channels[i]), buf, offset)
        offset += varint.encode.bytes
        Channel.encode(obj.channels[i], buf, offset)
        offset += Channel.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      sourceInfoUrl: "",
      sourceInfoName: "",
      generatorInfoName: "",
      generatorInfoUrl: "",
      channels: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.sourceInfoUrl = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.sourceInfoName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.generatorInfoName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.generatorInfoUrl = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 12:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.channels.push(Channel.decode(buf, offset, offset + len))
        offset += Channel.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
